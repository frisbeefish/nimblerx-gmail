<html>
  <head>
    <script type="text/javascript">
      // Your Client ID can be retrieved from your project in the Google
      // Developer Console, https://console.developers.google.com
      var CLIENT_ID = '614539835590-2hjig46k992utc16mbj5d574ksb5032p.apps.googleusercontent.com';

      //
      // Link: https://developers.google.com/gmail/api/auth/scopes
      //
      //var SCOPES = ['https://www.googleapis.com/auth/gmail.readonly'];
      var SCOPES = ['https://www.googleapis.com/auth/gmail.send','https://www.googleapis.com/auth/gmail.compose'];

      /*
      https://www.googleapis.com/auth/gmail.send', 'https://www.googleapis.com/auth/gmail.compose
      */

      /**
       * Check if current user has authorized this application.
       */
      function checkAuth() {
        gapi.auth.authorize(
          {
            'client_id': CLIENT_ID,
            'scope': SCOPES.join(' '),
            'immediate': true
          }, handleAuthResult);
      }

      /**
       * Handle response from authorization server.
       *
       * @param {Object} authResult Authorization result.
       */
      function handleAuthResult(authResult) {
        var authorizeDiv = document.getElementById('authorize-div');
        if (authResult && !authResult.error) {
          // Hide auth UI, then load client library.
          authorizeDiv.style.display = 'none';
          loadGmailApi();
        } else {
          // Show auth UI, allowing the user to initiate authorization by
          // clicking authorize button.
          authorizeDiv.style.display = 'inline';
        }
      }

      /**
       * Initiate auth flow in response to user clicking authorize button.
       *
       * @param {Event} event Button click event.
       */
      function handleAuthClick(event) {
        gapi.auth.authorize(
          {client_id: CLIENT_ID, scope: SCOPES, immediate: false},
          handleAuthResult);
        return false;
      }

      /**
       * Load Gmail API client library. List labels once client library
       * is loaded.
       */
      function loadGmailApi() {
        gapi.client.load('gmail', 'v1', listLabels);
      }

      //
      // Get threads: https://developers.google.com/gmail/api/guides/threads
      //
      // https://developers.google.com/gmail/api/v1/reference/users/threads/list#try-it
      //
      //

    /**
     * Retrieve Threads in the user's mailbox matching query.
     *
     * @param  {String} userId User's email address. The special value 'me'
     * can be used to indicate the authenticated user.
     * @param  {String} query String used to filter the Threads listed.
     * @param  {Function} callback Function to call when the request is complete.
     */
    function listThreads(callback) { //userId, query, callback) {
       var query = '';
      var getPageOfThreads = function(request, result) {
        request.execute(function (resp) {
          result = result.concat(resp.threads);
          var nextPageToken = resp.nextPageToken;
          if (nextPageToken) {
            request = gapi.client.gmail.users.threads.list({
              'userId': 'me',
              'q': query,
              'includeSpamTrash':false,
              'labelIds':['INBOX'],
              'maxResults':10,
              'pageToken': nextPageToken
            });
            getPageOfThreads(request, result);
          } else {
            callback(result);
          }
        });
      };
      var request = gapi.client.gmail.users.threads.list({
        'userId': 'me',
        'q': query,
        'includeSpamTrash':false,
        'labelIds':['INBOX'],
        'maxResults':10,
      });
      getPageOfThreads(request, []);
    }

    //
    // List messages: https://developers.google.com/gmail/api/v1/reference/users/messages/list
    //
/**
 * Retrieve Messages in user's mailbox matching query.
 *
 * @param  {String} userId User's email address. The special value 'me'
 * can be used to indicate the authenticated user.
 * @param  {String} query String used to filter the Messages listed.
 * @param  {Function} callback Function to call when the request is complete.
 */
function listMessages(userId, query, callback) {
  var getPageOfMessages = function(request, result) {
    request.execute(function(resp) {
      result = result.concat(resp.messages);
      var nextPageToken = resp.nextPageToken;
      if (nextPageToken) {
        request = gapi.client.gmail.users.messages.list({
          'userId': userId,
          'pageToken': nextPageToken,
          'q': query
        });
        getPageOfMessages(request, result);
      } else {
        callback(result);
      }
    });
  };
  var initialRequest = gapi.client.gmail.users.messages.list({
    'userId': userId,
    'q': query
  });
  getPageOfMessages(initialRequest, []);
}

//
// {"id":"1547cb0a5ed9860b","threadId":"1547cb0a5ed9860b"}
//
/**
 * Get Message with given ID.
 *
 * @param  {String} userId User's email address. The special value 'me'
 * can be used to indicate the authenticated user.
 * @param  {String} messageId ID of Message to get.
 * @param  {Function} callback Function to call when the request is complete.
 */
function getMessage(userId, messageId, callback) {
  var request = gapi.client.gmail.users.messages.get({
    'userId': userId,
    'id': messageId
  });
  request.execute(callback);
}






      /**
       * Print all Labels in the authorized user's inbox. If no labels
       * are found an appropriate message is printed.
       */
      function listLabels() {
        var request = gapi.client.gmail.users.labels.list({
          'userId': 'me'
        });

        request.execute(function(resp) {
          var labels = resp.labels;
          appendPre('Labels:');

          if (labels && labels.length > 0) {
            for (i = 0; i < labels.length; i++) {
              var label = labels[i];
              appendPre(label.name)
            }
          } else {
            appendPre('No Labels found.');
          }

alert("get message");
getMessage('me','1547cb0a5ed9860b',function(result) {
    alert('have result');
    console.log(JSON.stringify(result));

   // alert(result.payload.parts[0].body.data);
   // alert(atob(result.payload.parts[0].body.data));
   // alert('well?');
})

/*
          alert('get inbox');
          listMessages('me', '', function(result){
              alert('result: ' + result);
              //result.length = 10;
              console.log(JSON.stringify(result));

          });
*/

/*
          listThreads(function(result) {
              alert('result: ' + result);
              result.length = 10;
              console.log(JSON.stringify(result));
          })
*/
        });
      }

      /**
       * Append a pre element to the body containing the given message
       * as its text node.
       *
       * @param {string} message Text to be placed in pre element.
       */
      function appendPre(message) {
        var pre = document.getElementById('output');
        var textContent = document.createTextNode(message + '\n');
        pre.appendChild(textContent);
      }

function sendMessage(userId, email, callback) {
  var base64EncodedEmail = btoa(email);
  var request = gapi.client.gmail.users.messages.send({
    'userId': userId,
    'message': {
      'raw': base64EncodedEmail
    }
  });
  request.execute(callback);
}

      function doSend() {
         alert('do send');
         sendMessage('me','a test email from javascript',function () {
             alert('done with send');
         })
      }

    </script>
    <script src="https://apis.google.com/js/client.js?onload=checkAuth">
    </script>

    <title>NimbleRX Mail</title>
  </head>
  <body>

      <button  onclick="doSend()">
        Send an email
      </button>

    <div id="authorize-div" style="display: none">
      <span>Authorize access to Gmail API</span>
      <!--Button for the user to click to initiate auth sequence -->
      <button id="authorize-button" onclick="handleAuthClick(event)">
        Authorize
      </button>
    </div>
    <pre id="output" ></pre>
  </body>
</html>
